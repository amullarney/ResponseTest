/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-03-16T09:53:24.192386-07:00[America/Los_Angeles]")
@Validated
@Api(value = "querythird", description = "the querythird API")
public interface QuerythirdApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /querythird
     * try query parameter
     *
     * @param question  (required)
     * @return Success (status code 200)
     *         or Invalid request (status code 400)
     */
    @ApiOperation(value = "", nickname = "queryThird", notes = "try query parameter", response = String.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = String.class),
        @ApiResponse(code = 400, message = "Invalid request") })
    @GetMapping(
        value = "/querythird",
        produces = { "text/plain" }
    )
    default ResponseEntity<String> queryThird(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "question", required = true) String question) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
